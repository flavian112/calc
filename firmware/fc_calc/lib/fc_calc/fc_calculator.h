#ifndef FC_CALCULATOR_H
#define FC_CALCULATOR_H

#include "fc_scalar.h"

#ifdef __cplusplus
extern "C" {
#endif

#define FC_CALCULATOR_STACK_SIZE (32)
#define FC_CALCULATOR_REGISTER_FILE_SIZE (26)

typedef enum {
  FC_CALCULATOR_OPERATION_ADD,
  FC_CALCULATOR_OPERATION_SUBTRACT,
  FC_CALCULATOR_OPERATION_NEGATE,
  
  FC_CALCULATOR_OPERATION_MULTIPLY,
  FC_CALCULATOR_OPERATION_DIVIDE,
  FC_CALCULATOR_OPERATION_INVERSE,
  FC_CALCULATOR_OPERATION_MODULO,
  
  FC_CALCULATOR_OPERATION_SQUARE,
  FC_CALCULATOR_OPERATION_SQUAREROOT,
  FC_CALCULATOR_OPERATION_EXP,
  FC_CALCULATOR_OPERATION_EXP2,
  FC_CALCULATOR_OPERATION_EXP10,
  FC_CALCULATOR_OPERATION_LN,
  FC_CALCULATOR_OPERATION_LOG2,
  FC_CALCULATOR_OPERATION_LOG10,
  FC_CALCULATOR_OPERATION_LOG,
  FC_CALCULATOR_OPERATION_POWER,
  FC_CALCULATOR_OPERATION_ROOT,
  
  FC_CALCULATOR_OPERATION_SIN,
  FC_CALCULATOR_OPERATION_COS,
  FC_CALCULATOR_OPERATION_TAN,
  FC_CALCULATOR_OPERATION_ASIN,
  FC_CALCULATOR_OPERATION_ACOS,
  FC_CALCULATOR_OPERATION_ATAN,
  FC_CALCULATOR_OPERATION_SINH,
  FC_CALCULATOR_OPERATION_COSH,
  FC_CALCULATOR_OPERATION_TANH,
  FC_CALCULATOR_OPERATION_ASINH,
  FC_CALCULATOR_OPERATION_ACOSH,
  FC_CALCULATOR_OPERATION_ATANH,
  
  FC_CALCULATOR_OPERATION_NOT,
  FC_CALCULATOR_OPERATION_AND,
  FC_CALCULATOR_OPERATION_OR,
  FC_CALCULATOR_OPERATION_XOR,
  FC_CALCULATOR_OPERATION_NAND,
  FC_CALCULATOR_OPERATION_NOR,
  FC_CALCULATOR_OPERATION_XNOR,
  FC_CALCULATOR_OPERATION_SLL,
  FC_CALCULATOR_OPERATION_SRL,
  FC_CALCULATOR_OPERATION_SRA,
  
  FC_CALCULATOR_OPERATION_LNOT,
  FC_CALCULATOR_OPERATION_LAND,
  FC_CALCULATOR_OPERATION_LOR,
  
  FC_CALCULATOR_OPERATION_LT,
  FC_CALCULATOR_OPERATION_LE,
  FC_CALCULATOR_OPERATION_EQ,
  FC_CALCULATOR_OPERATION_NE,
  FC_CALCULATOR_OPERATION_GE,
  FC_CALCULATOR_OPERATION_GT,
  
  FC_CALCULATOR_OPERATION_ABS,
  FC_CALCULATOR_OPERATION_ARG,
  FC_CALCULATOR_OPERATION_CONJ,
  FC_CALCULATOR_OPERATION_REAL,
  FC_CALCULATOR_OPERATION_IMAG,
  
  FC_CALCULATOR_OPERATION_POP,
  FC_CALCULATOR_OPERATION_SWAP,
  FC_CALCULATOR_OPERATION_ROLLDOWN,
  FC_CALCULATOR_OPERATION_ROLLUP,
  FC_CALCULATOR_OPERATION_LASTX,
  
  FC_CALCULATOR_OPERATION_PUSH,
  
  FC_CALCULATOR_OPERATION_STORE,
  FC_CALCULATOR_OPERATION_RECALL,
  
  FC_CALCULATOR_OPERATION_CONSTANT,

  FC_CALCULATOR_OPERATION_TYPE,
  
  _FC_CALCULATOR_OPERATION_COUNT
} fc_calculator_operation_t;

typedef enum {
  FC_CALCULATOR_CONSTANT_PI,
  FC_CALCULATOR_CONSTANT_EULER,
  
  _FC_CALCULATOR_CONSTANT_COUNT
} fc_calculator_constant_t;

typedef struct {
  fc_scalar_t stack[FC_CALCULATOR_STACK_SIZE];
  unsigned stack_top;
  fc_scalar_t register_file[FC_CALCULATOR_REGISTER_FILE_SIZE];
  fc_scalar_t last_x;
  fc_scalar_type_t scalar_type;
} fc_calculator_state_t;

void fc_calculator_init(fc_calculator_state_t *state);

fc_scalar_t fc_calculator_stack_get(fc_calculator_state_t *state, unsigned index);
int fc_calculator_perform_operation(fc_calculator_state_t *state, fc_calculator_operation_t operation, ...);

fc_scalar_type_t fc_calculator_scalar_type_get(fc_calculator_state_t *state);

const char *fc_calculator_const_name(fc_calculator_constant_t constant);
const char *fc_calculator_operation_name(fc_calculator_operation_t operation);


#ifdef __cplusplus
}
#endif


#endif
